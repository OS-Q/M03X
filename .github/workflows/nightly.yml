name: nightly

# on:
#   schedule:
#     - cron: '0 9 * * *'
on:
  push:
    branches:
      - master

env:
  UPLOAD_BUILD: true

jobs:
  examples:
    name: examples
    strategy:
      fail-fast: false
      matrix:
        example:
          # - "unit-testing/arduino-mock"
          # - "unit-testing/calculator"
          # - "unit-testing/mbed-blink"
          - "unit-testing/stm32cube"
          - "unit-testing/wiring-blink"
        os: [ubuntu-16.04, ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7,3.9]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install latest
        run: |
          python -m pip install --upgrade pip
          pip install -U https://github.com/platformio/platformio-core/archive/master.zip
          pio update

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: platformio/platformio-examples
          token: ${{ secrets.OSQ_REPO_TOKEN }}
          path: examples

      - name: Build
        id: build
        working-directory: examples
        if: success()
        run: |
          pio run -d ${{ matrix.example }}
          echo "::set-output name=status::success"

  remote:
    name: remote
    strategy:
      fail-fast: false
      matrix:
        # example:
        #   # - "unit-testing/arduino-mock"
        #   # - "unit-testing/calculator"
        #   # - "unit-testing/mbed-blink"
        #   - "unit-testing/stm32cube"
        #   - "unit-testing/wiring-blink"
        os: [ubuntu-16.04, ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7,3.9]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install latest
        run: |
          python -m pip install --upgrade pip
          pip install -U https://github.com/platformio/platformio-core/archive/master.zip
          pio update

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: platformio/platformio-remote-unit-testing-example
          token: ${{ secrets.OSQ_REPO_TOKEN }}
          path: testing

      - name: Build
        id: build
        working-directory: testing
        if: success()
        run: |
          pio run -d .
          echo "::set-output name=status::success"

  # test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-16.04, windows-latest, macos-latest]
  #       python-version: [3.7]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: "recursive"

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         # pip install tox
  #         pip install -U https://github.com/platformio/platformio-core/archive/master.zip

  #     - name: Run on Linux
  #       if: startsWith(matrix.os, 'ubuntu')
  #       env:
  #         PIO_INSTALL_DEVPLATFORMS_OWNERNAMES: "platformio"
  #         PIO_INSTALL_DEVPLATFORMS_IGNORE: "ststm8,infineonxmc,intel_mcs51"
  #       run: |
  #         # ChipKIT issue: install 32-bit support for GCC PIC32
  #         sudo apt-get install libc6-i386
  #         # Free space
  #         sudo apt clean
  #         docker rmi $(docker image ls -aq)
  #         df -h
  #         # Run
  #         tox -e testexamples

  #     - name: Run on macOS
  #       if: startsWith(matrix.os, 'macos')
  #       env:
  #         PIO_INSTALL_DEVPLATFORMS_OWNERNAMES: "platformio"
  #         PIO_INSTALL_DEVPLATFORMS_IGNORE: "ststm8,infineonxmc,microchippic32,lattice_ice40,gd32v"
  #       run: |
  #         df -h
  #         tox -e testexamples

  #     - name: Run on Windows
  #       if: startsWith(matrix.os, 'windows')
  #       env:
  #         PLATFORMIO_CORE_DIR: C:/pio
  #         PLATFORMIO_WORKSPACE_DIR: C:/pio-workspace/$PROJECT_HASH
  #         PIO_INSTALL_DEVPLATFORMS_OWNERNAMES: "platformio"
  #         PIO_INSTALL_DEVPLATFORMS_IGNORE: "ststm8,infineonxmc,riscv_gap"
  #       run: |
  #         tox -e testexamples
